src/fork.c:55:       arena->arena[i % arena->mem_size] = fork->code[j];
src/fork.c:65:   mod = champ->cmd->op == 15 ? arena->mem_size : IDX_MOD;
src/fork.c:70:   champ->pc = op1 % arena->mem_size;
src/fork.c:71:   dup_in_arena(fork, arena, ABS(op1, arena->mem_size), mod);
src/fill_arena.c:25:      if (pos >= (arena->mem_size) || arena->arena[pos] != 0)
src/fill_arena.c:27:      arena->arena[pos] = code[i];
src/fill_arena.c:38:  arena->mem_size = mem_size;
src/fill_arena.c:39:  arena->nb_champs = 0;
src/fill_arena.c:40:  arena->total_size = 0;
src/fill_arena.c:41:  arena->cycle_to_die = CYCLE_TO_DIE;
src/fill_arena.c:45:      arena->nb_champs++;
src/fill_arena.c:46:      arena->total_size += champ->header->prog_size;
src/fill_arena.c:48:  if (arena->nb_champs == 0)
src/fill_arena.c:50:  if (arena->total_size >= arena->mem_size)
src/fill_arena.c:69:  if (!(arena->arena = calloc(mem_size + 10,  sizeof(char))))
src/fill_arena.c:71:  arena->current_cycle = 0;
src/fill_arena.c:72:  arena->cycle_to_die = CYCLE_TO_DIE;
src/fill_arena.c:73:  arena->nbr_live = 0;
src/fill_arena.c:81:      i = i + (arena->mem_size / arena->nb_champs);
src/main.c:71:  display_arena(arena->arena, arena->mem_size);
src/main.c:75:  display_arena(arena->arena, arena->mem_size);
src/store.c:33:      arena->arena[ABS(pos, arena->mem_size)] = (result / my_pow(256, k));
src/start_battle.c:27:  if (arena->nbr_live >= NBR_LIVE)
src/start_battle.c:29:      printf("cycle_to_die = %d nbr_live = %d\n", arena->cycle_to_die, arena->nbr_live);
src/start_battle.c:30:      arena->cycle_to_die -= CYCLE_DELTA;
src/start_battle.c:31:      arena->nbr_live = 0;
src/start_battle.c:38:  if (champ->cycle_to_die > arena->cycle_to_die)
src/start_battle.c:66:  while (arena->cycle_to_die > 0 && still_alive(root) > 1)
src/start_battle.c:73:	  if (++(arena->current_cycle) == sets->dump)
src/live.c:17:  arena->nbr_live++;
src/live.c:18:  arena->winner = champ;
src/load.c:31:   mod = champ->cmd->op == 10 ? IDX_MOD : arena->mem_size;
src/load.c:46:  mod = champ->cmd->op == 10 ? IDX_MOD : arena->mem_size;
src/load.c:53:   result = read_in_arena(arena->arena, (champ->pc + op1 + 1) % mod, 2);
src/load.c:54:   result = read_in_arena(arena->arena, (champ->pc + result + 1) % mod, 4);
src/exec_instructions.c:41:  if (get_instruction(&(arena->arena[champ->pc]), champ) == FAILURE)
src/exec_instructions.c:43:      champ->pc = (champ->pc + 1) % arena->mem_size;
